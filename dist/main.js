(()=>{"use strict";var e={192:(e,n,t)=>{t.d(n,{Z:()=>C});var r=t(537),a=t.n(r),o=t(645),A=t.n(o),i=t(667),c=t.n(i),s=new URL(t(911),t.b),d=new URL(t(52),t.b),l=A()(a());l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Lobster+Two&display=swap);"]),l.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400&display=swap);"]);var p=c()(s),u=c()(d);l.push([e.id,'*{padding:0;margin:0;box-sizing:border-box}body{height:100vh;width:100vw;display:grid;grid:"forecast ... images" 1fr "current ... images" 3fr "search ... images" 1fr/1fr 200px 1fr}body .forecast-container{grid-area:forecast;place-self:center}body .current-data-container{grid-area:current;place-self:center;width:100%;height:100%;display:grid;place-items:center;grid:"title" 100px "today" 1fr/1fr}body .current-data-container .city-name{grid-area:title}body .current-data-container .weather-today{grid-area:today;place-self:center;width:100%;height:100%;display:grid;place-items:center;grid:"description temp" 1fr "wind humidity" 1fr/1fr 1fr;place-items:center}body form{grid-area:search;place-self:center}body .images{grid-area:images}body{background:#262a2b;color:#6dfaa5;font-family:"Roboto",sans-serif;font-weight:400;padding:50px}.images{position:fixed;right:0;top:0;bottom:0;width:50%;background-image:url('+p+");background-size:contain;background-repeat:no-repeat;background-position:right}.images .window{position:absolute;top:50%;transform:translateY(-50%);content:url("+u+');border:2px solid #6dfaa5;border-radius:50%;width:600px;height:600px}.forecast-container{list-style:none;display:flex;gap:50px;margin-bottom:50px}.forecast-container>li{display:flex;flex-direction:column;justify-content:center;align-items:center;font-family:"Lobster Two",cursive;border:1px solid #6dfaa5;border-radius:50%;width:100px;height:100px;position:relative}.forecast-container>li h3{position:absolute;top:calc(100% + 5px);left:50%;transform:translateX(-50%)}.current-data-container h1{font-size:2.5rem;font-family:"Lobster Two",cursive;position:relative;width:100%;text-align:center}.current-data-container h1::before{content:"";position:absolute;bottom:-15px;left:0;width:200%;height:100%;border-bottom:1px solid #6dfaa5;z-index:-1}.current-data-container .weather-data{display:flex;flex-direction:column;align-items:center}.current-data-container .weather-data h3{font-size:1rem;font-weight:300;margin-top:10px}.current-data-container .weather-data.temperature-wrapper{position:relative}.current-data-container .weather-data.temperature-wrapper .temperature{position:relative}.current-data-container .weather-data.temperature-wrapper .reading{position:absolute;top:0;right:100%;display:flex;flex-direction:column;align-items:flex-start}.current-data-container .weather-data.temperature-wrapper .reading h3{font-size:1.5rem}.current-data-container .weather-data.temperature-wrapper .reading h4{font-size:.75rem}.current-data-container .weather-data.temperature-wrapper .toggle{display:flex;flex-direction:column;align-items:center;cursor:pointer;position:absolute;left:80%;top:50%}.current-data-container .weather-data.temperature-wrapper .toggle h3{font-size:1rem}.current-data-container .weather-data.temperature-wrapper .toggle .__input{display:none}.current-data-container .weather-data.temperature-wrapper .toggle .__fill{position:relative;width:50px;height:25px;border:1px solid #6dfaa5;border-radius:12.5px;background:#262a2b;transition:background .2s}.current-data-container .weather-data.temperature-wrapper .toggle .__fill::before{content:"";position:absolute;top:50%;left:0;transform:translateY(-50%);width:23px;height:23px;border:1px solid #6dfaa5;border-radius:50%;background:#262a2b;transition:left .5s ease-out}.current-data-container .weather-data.temperature-wrapper .toggle .__input:checked~.__fill{background:#6dfaa5}.current-data-container .weather-data.temperature-wrapper .toggle .__input:checked~.__fill::before{left:50%}form{width:100%;position:relative;display:flex;justify-content:center}form input{width:100%;color:#6dfaa5;background:#262a2b;border:1px solid #6dfaa5;height:30px;text-align:center}form input::placeholder{text-align:center}form input:focus,form input:focus-visible{color:#6dfaa5;background:#262a2b;outline:none;border-width:1.5px}form button{position:absolute;right:0;top:calc(100% + 20px);font-family:"Lobster Two",cursive;color:#6dfaa5;background:none;border:none;font-size:1.25rem;cursor:pointer}form button:hover{border-bottom:1px solid #6dfaa5}@media screen and (max-width: 1080px){body{grid:"forecast" 1fr "current " 3fr "search" 1fr/minmax(auto, 800px)}.images{display:none}.current-data-container h1::before{width:100%}}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAMA,EACI,SAAA,CACA,QAAA,CACA,qBAAA,CAIJ,KACI,YAAA,CACA,WAAA,CACA,YAAA,CACA,6FACI,CAKJ,yBACI,kBAAA,CACA,iBAAA,CAGJ,6BACI,iBAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,kBAAA,CACA,kCACI,CAIJ,wCACI,eAAA,CAGJ,4CACI,eAAA,CACA,iBAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,kBAAA,CACA,uDACI,CAGJ,kBAAA,CAIR,UACI,gBAAA,CACA,iBAAA,CAGJ,aACI,gBAAA,CAKR,KACI,kBAnEe,CAoEf,aArES,CAsET,+BAAA,CACA,eAAA,CACA,YAAA,CAGJ,QACI,cAAA,CACA,OAAA,CACA,KAAA,CACA,QAAA,CACA,SAAA,CACA,wDAAA,CACA,uBAAA,CACA,2BAAA,CACA,yBAAA,CAEA,gBACI,iBAAA,CACA,OAAA,CACA,0BAAA,CAEA,+CAAA,CACA,wBAAA,CACA,iBAAA,CACA,WAJc,CAKd,YALc,CAStB,oBACI,eAAA,CACA,YAAA,CACA,QAAA,CACA,kBAAA,CAEA,uBACI,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CACA,iCAAA,CAEA,wBAAA,CACA,iBAAA,CACA,WAAA,CACA,YAAA,CACA,iBAAA,CAEA,0BACI,iBAAA,CACA,oBAAA,CACA,QAAA,CACA,0BAAA,CAMR,2BACI,gBAAA,CACA,iCAAA,CACA,iBAAA,CACA,UAAA,CACA,iBAAA,CAEA,mCACI,UAAA,CACA,iBAAA,CACA,YAAA,CACA,MAAA,CACA,UAAA,CACA,WAAA,CACA,+BAAA,CACA,UAAA,CAIR,sCACI,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,yCACI,cAAA,CACA,eAAA,CACA,eAAA,CAIR,0DACI,iBAAA,CACA,uEACI,iBAAA,CAEJ,mEACI,iBAAA,CACA,KAAA,CACA,UAAA,CACA,YAAA,CACA,qBAAA,CACA,sBAAA,CAEA,sEACI,gBAAA,CAGJ,sEACI,gBAAA,CAGR,kEAII,YAAA,CACA,qBAAA,CACA,kBAAA,CACA,cAAA,CACA,iBAAA,CACA,QAAA,CACA,OAAA,CAEA,qEACI,cAAA,CAGJ,2EACI,YAAA,CAGJ,0EACI,iBAAA,CACA,UArBI,CAsBJ,WArBK,CAsBL,wBAAA,CACA,oBAtBY,CAuBZ,kBA5MG,CA6MH,yBAAA,CAEA,kFACI,UAAA,CACA,iBAAA,CACA,OAAA,CACA,MAAA,CACA,0BAAA,CACA,UAAA,CACA,WAAA,CACA,wBAAA,CACA,iBAAA,CACA,kBAzND,CA0NC,4BAAA,CAIR,2FACI,kBAhOH,CAkOG,mGACI,QAAA,CASpB,KACI,UAAA,CACA,iBAAA,CACA,YAAA,CACA,sBAAA,CAEA,WACI,UAAA,CACA,aApPK,CAqPL,kBApPW,CAqPX,wBAAA,CACA,WAAA,CACA,iBAAA,CAEA,wBACI,iBAAA,CAGJ,0CACI,aA/PC,CAgQD,kBA/PO,CAgQP,YAAA,CACA,kBAAA,CAIR,YACI,iBAAA,CACA,OAAA,CACA,qBAAA,CAEA,iCAAA,CACA,aA5QK,CA6QL,eAAA,CACA,WAAA,CACA,iBAAA,CACA,cAAA,CAEA,kBACI,+BAAA,CAKZ,sCAEI,KACI,mEACA,CAMJ,QACI,YAAA,CAGJ,mCACI,UAAA,CAAA",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Lobster+Two&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400&display=swap');\n\n$main-color: #6DFAA5;\n$background-color: #262A2B;\n\n* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\n\n// Page grid layout.\nbody {\n    height: 100vh;\n    width: 100vw;\n    display: grid;\n    grid:\n        'forecast ... images' 1fr\n        'current ... images' 3fr\n        'search ... images' 1fr /\n        1fr 200px 1fr;\n    \n    .forecast-container {\n        grid-area: forecast;\n        place-self: center;\n    }\n\n    .current-data-container {\n        grid-area: current;\n        place-self: center;\n        width: 100%;\n        height: 100%;\n        display: grid;\n        place-items: center;\n        grid:\n            'title' 100px\n            'today' 1fr /\n            1fr;\n\n        .city-name {\n            grid-area: title;\n        }\n\n        .weather-today {\n            grid-area: today;\n            place-self: center;\n            width: 100%;\n            height: 100%;\n            display: grid;\n            place-items: center;\n            grid:\n                'description temp' 1fr\n                'wind humidity' 1fr /\n                1fr 1fr;\n            place-items: center;\n            }\n    }\n    \n    form {\n        grid-area: search;\n        place-self: center;\n    }\n\n    .images {\n        grid-area: images;\n    }\n}\n\n// Styling.\nbody {\n    background: $background-color;\n    color: $main-color;\n    font-family: 'Roboto', sans-serif;\n    font-weight: 400;\n    padding: 50px;\n}\n\n.images {\n    position: fixed;\n    right: 0;\n    top: 0;\n    bottom: 0;\n    width: 50%;\n    background-image: url('./images/bg_image.png');\n    background-size:contain;\n    background-repeat: no-repeat;\n    background-position: right;\n\n    .window {\n        position: absolute;\n        top: 50%;\n        transform: translateY(-50%);\n        $window_size: 600px;\n        content: url('./images/window.png');\n        border: 2px solid $main-color;\n        border-radius: 50%;\n        width: $window_size;\n        height: $window_size;\n    }\n}\n\n.forecast-container {\n    list-style: none;\n    display: flex;\n    gap: 50px;\n    margin-bottom: 50px;\n\n    >li {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        font-family: 'Lobster Two', cursive;\n\n        border: 1px solid $main-color;\n        border-radius: 50%;\n        width: 100px;\n        height: 100px;\n        position: relative;\n\n        h3 {\n            position: absolute;\n            top: calc(100% + 5px);\n            left: 50%;\n            transform: translateX(-50%);\n        }\n    }\n}\n\n.current-data-container {\n    h1 {\n        font-size: 2.5rem;\n        font-family: 'Lobster Two', cursive;\n        position: relative;\n        width: 100%;\n        text-align: center;\n\n        &::before {\n            content: '';\n            position: absolute;\n            bottom: calc(0px - 15px);\n            left: 0;\n            width: 200%;\n            height: 100%;\n            border-bottom: 1px solid $main-color;\n            z-index: -1;\n        }\n    }\n\n    .weather-data {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        h3 {\n            font-size: 1rem;\n            font-weight: 300;\n            margin-top: 10px;\n        }\n    }\n\n    .weather-data.temperature-wrapper {\n        position: relative;\n        .temperature {\n            position: relative;\n        }\n        .reading {\n            position: absolute;\n            top: 0;\n            right: 100%;\n            display: flex;\n            flex-direction: column;\n            align-items: flex-start;\n\n            h3 {\n                font-size: 1.5rem;\n            }\n\n            h4 {\n                font-size: 0.75rem;\n            }\n        }\n        .toggle {\n            $width: 50px;\n            $height: calc($width / 2);\n            $border-radius: calc($height / 2);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            cursor: pointer;\n            position: absolute;\n            left: 80%;\n            top: 50%;\n\n            h3 {\n                font-size: 1rem;\n            }\n\n            .__input {\n                display: none;\n            }\n\n            .__fill {\n                position: relative;\n                width: $width;\n                height: $height;\n                border: 1px solid $main-color;\n                border-radius: $border-radius;\n                background: $background-color;\n                transition: background 0.2s;\n\n                &::before {\n                    content: '';\n                    position: absolute;\n                    top: 50%;\n                    left: 0;\n                    transform: translateY(-50%);\n                    width: calc($height - 2px);\n                    height: calc($height - 2px);\n                    border: 1px solid $main-color;\n                    border-radius: 50%;\n                    background: $background-color;\n                    transition: left .5s ease-out;\n                }\n            }\n\n            .__input:checked ~ .__fill {\n                background: $main-color;\n\n                &::before {\n                    left: 50%;\n                }\n            }\n        }\n    }\n}\n\n\n\nform {\n    width: 100%;\n    position: relative;\n    display: flex;\n    justify-content: center;\n\n    input {\n        width: 100%;\n        color: $main-color;\n        background: $background-color;\n        border: 1px solid $main-color;\n        height: 30px;\n        text-align: center;\n        \n        &::placeholder {\n            text-align: center;\n        }\n        \n        &:focus, &:focus-visible {\n            color: $main-color;\n            background: $background-color;\n            outline: none;\n            border-width: 1.5px;\n        }\n    }\n\n    button {\n        position: absolute;\n        right: 0;\n        top: calc(100% + 20px);\n\n        font-family: 'Lobster Two', cursive;\n        color: $main-color;\n        background: none;\n        border: none;\n        font-size: 1.25rem;\n        cursor: pointer;\n        \n        &:hover {\n            border-bottom: 1px solid $main-color;\n        }\n    }\n}\n\n@media screen and (max-width: 1080px) {\n\n    body {\n        grid:\n        'forecast' 1fr\n        'current ' 3fr\n        'search' 1fr /\n        minmax(auto, 800px);\n    }\n\n    .images {\n        display: none;\n    }\n\n    .current-data-container h1::before {\n        width: 100%;\n    }\n}"],sourceRoot:""}]);const C=l},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var A={};if(r)for(var i=0;i<this.length;i++){var c=this[i][0];null!=c&&(A[c]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);r&&A[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),n.push(d))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),A=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(A).concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},A=[],i=0;i<e.length;i++){var c=e[i],s=r.base?c[0]+r.base:c[0],d=o[s]||0,l="".concat(s," ").concat(d);o[s]=d+1;var p=t(l),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var C=a(u,r);r.byIndex=i,n.splice(i,0,{identifier:l,updater:C,references:1})}A.push(l)}return A}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var A=0;A<o.length;A++){var i=t(o[A]);n[i].references--}for(var c=r(e,a),s=0;s<o.length;s++){var d=t(o[s]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}o=c}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},911:(e,n,t)=>{e.exports=t.p+"aa276f4c9c872b58553a.png"},52:(e,n,t)=>{e.exports=t.p+"71427d8f36e7b1893fc1.png"}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),o=t(569),A=t.n(o),i=t(565),c=t.n(i),s=t(216),d=t.n(s),l=t(589),p=t.n(l),u=t(192),C={};C.styleTagTransform=p(),C.setAttributes=c(),C.insert=A().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=d(),n()(u.Z,C),u.Z&&u.Z.locals&&u.Z.locals;const f=t.p+"6163ba3e850ae7d92d73.svg",m=t.p+"498290e2bc7c3e8b84de.svg";let h={Thunderstorm:f,Drizzle:m,Rain:m,Snow:t.p+"683ed29dde6ea973989f.svg",Atmosphere:t.p+"047c00f6d1ce6a525c39.svg",Clear:t.p+"59bc78c6f2c95982851b.svg",Clouds:t.p+"63b407ad1255d2a4492c.svg",Thermostat:t.p+"333e07fb919060e2ce7e.svg",Wind:t.p+"44c0423ae89533af560e.svg",Humidity:t.p+"3eaf5d4fa6bf978fa6a5.svg"};const g=document.querySelector(".forecast-container"),b=document.querySelector("[data-city]"),w=document.querySelector("[data-description]"),y=document.querySelector("[data-temperature]"),x=document.querySelector("[data-wind-speed]"),v=document.querySelector("[data-humidity]"),B=document.getElementsByTagName("form")[0],I=document.querySelector("[data-search-bar]"),k=document.querySelector("[data-toggle-unit]"),E="651dc446b420d45adb42aea9be445339";async function $(){const e=new URL("https://api.openweathermap.org/data/2.5/onecall"),n=await async function(e=null){const n=I.value||e||"Wellington",t=new URL("http://api.openweathermap.org/geo/1.0/direct"),r={q:n,appid:E};Object.keys(r).forEach((e=>t.searchParams.append(e,r[e])));const a=await fetch(t);return await a.json()}(),t={lat:n[0].lat,lon:n[0].lon,units:k.checked?"imperial":"metric",exclude:"hourly,minutely",appid:E};Object.keys(t).forEach((n=>e.searchParams.append(n,t[n])));const r=await fetch(e),a=await r.json(),o=function(e){const n=[];return e.daily.slice(1,5).forEach((e=>{n.push({day:S(e),symbol:U(e)})})),n}(a);!function(e){const n=g.children;for(let t=0;t<n.length;t++){const r=n[t];_(r);const a=new Image(50,50);a.src=h[`${e[t].symbol}`];const o=document.createElement("h3");o.innerText=`${e[t].day}`,r.appendChild(a),r.appendChild(o)}}(o),b.innerText=`${n[0].name}, ${n[0].country}`,function(e,n){_(e);const t=n.current.weather[0].main.split(" ").map((e=>T(e))).join(" "),r=n.current.weather[0].description.split(" ").map((e=>T(e))).join(" "),a=new Image(100,100),o=document.createElement("h3");a.src=h[t],o.innerText=r,e.appendChild(a),e.appendChild(o)}(w,a),function(e,n){_(e);const t=`${n.current.temp}°`,r=k.checked?"Fahrenheit":"Celcius",a=document.createElement("h3"),o=document.createElement("h4");a.innerText=t,o.innerText=r;const A=new Image(100,100);A.src=h.Thermostat;const i=document.createElement("div");i.classList.add("reading"),i.appendChild(a),i.appendChild(o),e.appendChild(i),e.appendChild(A)}(y,a),function(e,n,t){_(e);const r=`${n.current.wind_speed} ${"imperial"===t.units?"m/ph":"m/s"}`,a=document.createElement("h3"),o=new Image(100,100);a.innerText=r,o.src=h.Wind,e.appendChild(o),e.appendChild(a)}(x,a,t),function(e,n){_(e);const t=`Humidity: ${n.current.humidity}%`,r=document.createElement("h3"),a=new Image(100,100);r.innerText=t,a.src=h.Humidity,e.appendChild(a),e.appendChild(r)}(v,a)}function T(e){return e.toUpperCase()[0]+e.slice(1)}function _(e){if(e.firstChild)for(;e.lastChild;)e.removeChild(e.lastChild)}function S(e){return new Date(1e3*e.dt).toLocaleString("en-US",{weekday:"long"})}function U(e){return e.weather[0].main}$(),B.addEventListener("submit",(e=>{e.preventDefault(),$()})),k.addEventListener("input",(async()=>{await $()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,